name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: curriculum_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: npm run lint
      
      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/curriculum_db_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: npm run test --workspace=packages/backend
      
      - name: Build backend
        run: npm run build --workspace=packages/backend
      
      - name: Build frontend
        run: npm run build --workspace=packages/frontend

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service: [frontend, backend, worker, ai-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Determine Dockerfile path
        id: dockerfile
        run: |
          if [ "${{ matrix.service }}" = "worker" ]; then
            echo "path=packages/backend/Dockerfile.worker" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.service }}" = "ai-service" ]; then
            echo "path=packages/ai-service/Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "path=packages/${{ matrix.service }}/Dockerfile" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.dockerfile.outputs.path }}
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/curriculum-${{ matrix.service }}:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/curriculum-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.curriculum-app.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster curriculum-staging-cluster \
            --service curriculum-frontend-service \
            --force-new-deployment
          
          aws ecs update-service \
            --cluster curriculum-staging-cluster \
            --service curriculum-api-service \
            --force-new-deployment
          
          aws ecs update-service \
            --cluster curriculum-staging-cluster \
            --service curriculum-worker-service \
            --force-new-deployment
          
          aws ecs update-service \
            --cluster curriculum-staging-cluster \
            --service curriculum-ai-service \
            --force-new-deployment
      
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster curriculum-staging-cluster \
            --services curriculum-frontend-service curriculum-api-service curriculum-worker-service curriculum-ai-service
      
      - name: Run health checks
        run: |
          curl -f https://staging-api.curriculum-app.example.com/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://curriculum-app.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster curriculum-production-cluster \
            --service curriculum-frontend-service \
            --force-new-deployment
          
          aws ecs update-service \
            --cluster curriculum-production-cluster \
            --service curriculum-api-service \
            --force-new-deployment
          
          aws ecs update-service \
            --cluster curriculum-production-cluster \
            --service curriculum-worker-service \
            --force-new-deployment
          
          aws ecs update-service \
            --cluster curriculum-production-cluster \
            --service curriculum-ai-service \
            --force-new-deployment
      
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster curriculum-production-cluster \
            --services curriculum-frontend-service curriculum-api-service curriculum-worker-service curriculum-ai-service
      
      - name: Run health checks
        run: |
          curl -f https://api.curriculum-app.example.com/health || exit 1
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          aws ecs update-service \
            --cluster curriculum-production-cluster \
            --service curriculum-frontend-service \
            --task-definition curriculum-frontend:$((${{ github.run_number }} - 1))
          
          aws ecs update-service \
            --cluster curriculum-production-cluster \
            --service curriculum-api-service \
            --task-definition curriculum-api:$((${{ github.run_number }} - 1))
